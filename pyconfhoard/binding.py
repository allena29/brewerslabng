
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
  unicode = str
elif six.PY2:
  import __builtin__

class yc_stats_tester__list1_stats(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module tester - based on the path /list1/stats. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__heartrate',)

  _yang_name = 'stats'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__heartrate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="heartrate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['list1', 'stats']

  def _get_heartrate(self):
    """
    Getter method for heartrate, mapped from YANG variable /list1/stats/heartrate (uint32)
    """
    return self.__heartrate
      
  def _set_heartrate(self, v, load=False):
    """
    Setter method for heartrate, mapped from YANG variable /list1/stats/heartrate (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_heartrate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_heartrate() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="heartrate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """heartrate must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="heartrate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='uint32', is_config=False)""",
        })

    self.__heartrate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_heartrate(self):
    self.__heartrate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="heartrate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='uint32', is_config=False)

  heartrate = __builtin__.property(_get_heartrate)


  _pyangbind_elements = {'heartrate': heartrate, }


class yc_list1_tester__list1(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module tester - based on the path /list1. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__key1','__nonkey','__stats',)

  _yang_name = 'list1'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__key1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="key1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='string', is_config=True)
    self.__nonkey = YANGDynClass(base=unicode, is_leaf=True, yang_name="nonkey", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='string', is_config=True)
    self.__stats = YANGDynClass(base=yc_stats_tester__list1_stats, is_container='container', yang_name="stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['list1']

  def _get_key1(self):
    """
    Getter method for key1, mapped from YANG variable /list1/key1 (string)
    """
    return self.__key1
      
  def _set_key1(self, v, load=False):
    """
    Setter method for key1, mapped from YANG variable /list1/key1 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_key1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_key1() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="key1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """key1 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="key1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='string', is_config=True)""",
        })

    self.__key1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_key1(self):
    self.__key1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="key1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='string', is_config=True)


  def _get_nonkey(self):
    """
    Getter method for nonkey, mapped from YANG variable /list1/nonkey (string)
    """
    return self.__nonkey
      
  def _set_nonkey(self, v, load=False):
    """
    Setter method for nonkey, mapped from YANG variable /list1/nonkey (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nonkey is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nonkey() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="nonkey", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nonkey must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="nonkey", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='string', is_config=True)""",
        })

    self.__nonkey = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nonkey(self):
    self.__nonkey = YANGDynClass(base=unicode, is_leaf=True, yang_name="nonkey", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='string', is_config=True)


  def _get_stats(self):
    """
    Getter method for stats, mapped from YANG variable /list1/stats (container)
    """
    return self.__stats
      
  def _set_stats(self, v, load=False):
    """
    Setter method for stats, mapped from YANG variable /list1/stats (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stats is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stats() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_stats_tester__list1_stats, is_container='container', yang_name="stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stats must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_stats_tester__list1_stats, is_container='container', yang_name="stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='container', is_config=True)""",
        })

    self.__stats = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stats(self):
    self.__stats = YANGDynClass(base=yc_stats_tester__list1_stats, is_container='container', yang_name="stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='container', is_config=True)

  key1 = __builtin__.property(_get_key1, _set_key1)
  nonkey = __builtin__.property(_get_nonkey, _set_nonkey)
  stats = __builtin__.property(_get_stats, _set_stats)


  _pyangbind_elements = {'key1': key1, 'nonkey': nonkey, 'stats': stats, }


class tester(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module tester - based on the path /tester. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_extmethods', '__list1',)

  _yang_name = 'tester'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__list1 = YANGDynClass(base=YANGListType("key1",yc_list1_tester__list1, yang_name="list1", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='key1', extensions=None), is_container='list', yang_name="list1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_list1(self):
    """
    Getter method for list1, mapped from YANG variable /list1 (list)
    """
    return self.__list1
      
  def _set_list1(self, v, load=False):
    """
    Setter method for list1, mapped from YANG variable /list1 (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_list1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_list1() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("key1",yc_list1_tester__list1, yang_name="list1", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='key1', extensions=None), is_container='list', yang_name="list1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """list1 must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("key1",yc_list1_tester__list1, yang_name="list1", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='key1', extensions=None), is_container='list', yang_name="list1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='list', is_config=True)""",
        })

    self.__list1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_list1(self):
    self.__list1 = YANGDynClass(base=YANGListType("key1",yc_list1_tester__list1, yang_name="list1", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='key1', extensions=None), is_container='list', yang_name="list1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://confvillain.mellon-collie.net/tester/', defining_module='tester', yang_type='list', is_config=True)

  list1 = __builtin__.property(_get_list1, _set_list1)


  _pyangbind_elements = {'list1': list1, }


