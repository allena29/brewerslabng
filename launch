#!/usr/bin/env python2.7

import argparse
import os
import imp
import sys
import importlib

def dump(obj=None, filter=False, ignore_opdata=True, ignore_conf_leaves=False):
    global p
    if not obj:
        obj = p
    print(pybindJSON.dumps(obj, filter=filter, ignore_opdata=ignore_opdata,
                           ignore_conf_leaves=ignore_conf_leaves, mode='ietf'))

if __name__ == '__main__':
    description = """
Launch a PyConfHoard 'thing'.
    """

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('--thing', required=True)
    parser.add_argument('--debug', action='store_true')
    args = parser.parse_args()

if os.path.exists(args.thing):
    path = args.thing.split('/')
    os.chdir('things')
    if os.path.exists('%s/%s' % (path[1], path[2])):
        os.chdir(path[1])
        sys.path.insert(0, '../../pyconfhoard')
        sys.path.insert(0, '../../yang')
        py_mod = imp.load_source(path[2].split('.')[0], path[2])
        launcher = getattr(py_mod, 'Launch')

        if args.debug:
            import IPython
            import pyangbind.lib.pybindJSON as pybindJSON
            from pyangbind.lib.xpathhelper import YANGPathHelper
            from pyangbind.lib.serialise import pybindJSONDecoder
            import binding
           
            pyangbindclasses = ['PybindBase', 'YANGBool', 'Decimal', 'attrgetter', 'bitarray']
            mod = importlib.import_module('binding')
            classes = dict([(name, cls) for name, cls in mod.__dict__.items() if isinstance(cls, type)])
            our_class = None
            for cls in classes:
                if not cls[0:3] == 'yc_' and not cls in pyangbindclasses:
                    if our_class:
                        raise ValueError('Could not determine which class to instantiate from pyangbinding')
                    our_class = cls

            if not our_class:
                raise ValueError('Could not determine which clas to instantiate from pyangbind')

            ph = YANGPathHelper()
            p = getattr(mod, our_class)(path_helper = ph)

            print('%s() pyangbind instance => p' % (our_class))
            print('path-helper instance => ph')
            print('dump() to provide JSON object')
            print('launcher is available => launcher')
            IPython.embed(display_banner=False)
        else:
            launcher.thing(start=True)

    else:
        raise ValueError('%s not a valid thing - cannot launch' % (args.thing))
    
else:
    raise ValueError('%s does not exist' % (args.thing))
