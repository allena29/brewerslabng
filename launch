#!/usr/bin/env python3

import argparse
import os
import imp
import sys
import importlib
sys.path.insert(0, os.getcwd() + '/pyconfhoard')
sys.path.insert(0, 'pyconfhoard/cli')
from PyConfHoardDatastore import PyConfHoardDatastore
from PyConfHoardDatastore import PyConfHoardDataFilter
from cli import PyConfHoardCLI
import dpath.util

description = """
Launch a PyConfHoard 'thing'.
"""
parser = argparse.ArgumentParser(description=description)
parser.add_argument('--thing', help="Path to a thing (e.g. things/temperature/TemperatureProviderDS18B20.py)")
parser.add_argument('--rest', action='store_true')
parser.add_argument('--cli', action='store_true')
parser.add_argument('--debug', action='store_true', help="Launch in interactive debug mode")
parser.add_argument('--register', action='store_true', help="Register the yang module")
args = parser.parse_args()


if not args.thing and not args.rest and not args.cli and not args.debug:
    sys.stderr.write('Either --thing or --rest or --cli required')
    sys.exit(1)

if args.rest:
    os.system('gunicorn --reload pyconfhoard.rest.server')
elif args.cli:
    os.chdir('pyconfhoard/cli')
    os.system('PYTHONPATH=$PYTHONPATH:../ python cli.py')
elif args.debug:
    import IPython
    f = PyConfHoardDataFilter
    F = PyConfHoardDataFilter
    d = PyConfHoardDatastore()
    D = PyConfHoardDatastore()
    c = PyConfHoardCLI(no_networking=True)
    C = PyConfHoardCLI(no_networking=True)
    d.load_blank_schema('yang/schema.json')
    D.load_blank_schema('pyconfhoard/test/schema.json')
    C.datastore.db = D.db
    c.datastore.db = d.db
    dp = dpath.util
    print('Running from %s' % (os.getcwd()))
    print('dp = dpath.util')
    print('yang/schema.json')
    print(' f = PyConfHoardDataFilter')
    print(' d = PyConfHoardDataStore()')
    print(' d.db = database')
    print(' c = PyConfHoardCLI()')
    print('pyconfhoard/test/schema.json')
    print(' R = PyConfHoardDataFilter')
    print(' D = PyConfHoardDataStore()')
    print(' D.db = database')
    print(' C = PyConfHoardCLI()')
    IPython.embed(display_banner=False)

elif os.path.exists(args.thing):
    path = args.thing.split('/')
    os.chdir('things')
    if os.path.exists('%s/%s' % (path[1], path[2])):
        os.chdir(path[1])
        py_mod = imp.load_source(path[2].split('.')[0], path[2])
        launcher = getattr(py_mod, 'Launch')
        if args.register:
            launch = launcher()
            launch.thing.register()
        else:
            launch = launcher()
            launch.thing.start()

    else:
        raise ValueError('%s not a valid thing - cannot launch' % (args.thing))

else:
    raise ValueError('%s does not exist' % (args.thing))
